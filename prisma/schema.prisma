// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             String            @id @default(cuid())
  username       String?           @unique
  image          String?
  bio            String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  points    Int     @default(0)
  level     Int     @default(1)
  walletAddress String? @unique
  readingCredits Int @default(0)
  runs      Run[]
  profiles       Profile[]

}

model Run {
  id          Int     @id @default(autoincrement())
  timeSpent   Int
  wordCount   Int
  content     String
  imageUrl    String?
  pauseTimes Int?
  sentToAnki Boolean @default(true)
  createdAt   DateTime @default(now())
  userId     String?
   user        User?     @relation(fields: [userId], references: [id])
}

model Profile {
  id        Int      @id @default(autoincrement())
  writing   String
  imageUrl  String
  bio       String
  timeSpent   Int    @default(88)
  createdAt DateTime @default(now())
  userId    String   // Added userId to relate with User model
  user      User     @relation(fields: [userId], references: [id])
}


model NFT {
  id        Int      @id @default(autoincrement())
  prompt    String
  imageUrl  String
  createdAt DateTime @default(now())
}

model Character {
  id                   String   @id @default(cuid())
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt  @default(now())
  promptForMidjourney    String?
  name                   String?
  characterBackstory     String?
  imageId                String?  // Back from imagine api
  upscaledImageUrls      String[] // store as JSON string
  chosenImageUrl         String?
  traits                 Json?
}

model CharacterBackup {
  id                         String         @id @default(cuid())
  genesisCharacterId         String?         @unique
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt  @default(now())
  worldId                    String
  world                      World[]
  promptForMidjourney        String?
  characterName              String?
  nftNumber                  Int?
  characterBackstory         String?
  imageId                    String?
  upscaledImageUrls          String[]       // store as JSON string
  chosenImageUrl             String?
  readyToMint                Boolean        @default(false)
  completionResponse         String?
  tweeted                    Boolean        @default(false)
  addedToIPFS                Boolean        @default(false)
  state                      CharacterState
  traits                     Json?
  worldCharacteristicsOfPeople String?
}

enum CharacterState {
  VOID                      // IDEA_IN_THE_NOOSPHERE
  GERMINAL                  // STORY_GENERATED
  EMBRYONIC                 // IMAGE_REQUESTED
  FETAL                     // IMAGE_RECEIVED
  BIRTHED                   // IMAGE_CHOSEN
  FAILED                    // IMAGE_GENERATION_FAILED
}

model City {
  id                 String    @id @default(cuid())
  name               String
  associatedLandmark String
  mainActivity       String
  worldId            String
  world              World     @relation(fields: [worldId], references: [id])
}

model Landmark {
  id      String    @id @default(cuid())
  name    String
  worldId String
  world   World     @relation(fields: [worldId], references: [id])
}

model Celebration {
  id      String    @id @default(cuid())
  name    String
  worldId String
  world   World     @relation(fields: [worldId], references: [id])
}

model World {
  id                String     @id @default(cuid())
  name              String
  chakra            Int   @unique
  otherside         String
  description       String
  characteristics   String
  landmarks         Landmark[]
  cities            City[]
  characterBackup    CharacterBackup[]
  characteristicsOfPeople  String
  celebrations      Celebration[]
}
